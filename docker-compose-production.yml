version: '3'
services:
  # Webserver for Reverse proxy
  nginx:
    image: nginx:latest
    restart: always
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend:/var/www/backend
      - ./frontend:/var/www/frontend
      - ./certbot:/var/www/certbot
      - ./data/certbot/conf:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    logging:
      driver: "awslogs"
      options:
          awslogs-region: "ap-southeast-1"
          awslogs-group: "pikobar-labkes-satelite"
          awslogs-stream: "prod-nginx"

  # Redis session and queue management
  redis:
    container_name: redis
    restart: always
    image: redis:3.2-alpine
    logging:
      driver: "awslogs"
      options:
          awslogs-region: "ap-southeast-1"
          awslogs-group: "pikobar-labkes-satelite"
          awslogs-stream: "prod-redis"

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./certbot:/var/www/certbot
      - ./data/certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot-path /var/www/certbot; sleep 12h & wait $${!}; done;'"
    logging:
      driver: "awslogs"
      options:
          awslogs-region: "ap-southeast-1"
          awslogs-group: "pikobar-labkes-satelite"
          awslogs-stream: "prod-certbot"

    
  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: laravel-www
    container_name: app
    restart: always
    tty: true
    environment:
      CONTAINER_ROLE: app
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./backend:/var/www/backend
      - ./frontend:/var/www/frontend
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    logging:
      driver: "awslogs"
      options:
          awslogs-region: "ap-southeast-1"
          awslogs-group: "pikobar-labkes-satelite"
          awslogs-stream: "prod-app"
